<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.backoffice.backoffice.mapper.EmployeesMapper">

    <!--    사원 회원가입-->
    <insert id="employeesSave" parameterType="EmployeesRegisterRequest" useGeneratedKeys="true" keyProperty="id">
        insert into "Employees" (email, name, password, department_id, status, phone, hire_date)
        values (#{email}, #{name}, #{password}, #{departmentId}, true, #{phone}, now()::date)
    </insert>

    <!--    이메일 찾기-->
    <select id="findByEmail" parameterType="String">
        select email
        from "Employees"
        where email = #{email}
    </select>

    <!--    이메일, 패스워드찾기-->
    <select id="findByEmailAndPassword" parameterType="EmployeesDto">
        select id,
               email,
               password,
               name,
               department_id,
               status,
               phone,
               hire_date
        from "Employees"
        where email = #{email}
    </select>

    <!--    사원정보 업데이트-->
    <update id="employeesUpdate" parameterType="EmployeesUpdateRequest">
        update "Employees"
        set email  = #{email},
            name   = #{name},
            status = #{status},
            phone  = #{phone}
        where id = #{id}
    </update>

    <!--사원 삭제-->
    <delete id="employeesDelete" parameterType="EmployeesDeleteRequest">
        delete
        from "Employees"
        where id = #{id}
    </delete>

    <!--    status 변경-->
    <update id="statusChange" parameterType="Integer">
        update "Employees"
        set status = false
        where id = #{id}
    </update>


    <!--    사원 찾기-->
    <select id="findEmployees" parameterType="Integer" resultType="EmployeesDto">
        select id,
               email,
               name,
               password,
               department_id,
               status,
               phone,
               to_char(hire_date, 'YYYY-MM-DD') as hire_date
        from "Employees"
        where id = #{id}
    </select>

    <select id="findEmpl" parameterType="Integer" resultType="EmployeesDto">
        select id,
               email,
               name,
               password,
               department_id,
               status,
               phone,
               to_char(hire_date, 'YYYY-MM-DD') as hire_date
        from "Employees"
        where id = #{id} limit 1
    </select>


    <!--    사원 전체 출력-->
    <select id="findAllEmployees" resultType="EmployeesDto">
        select *
        from "Employees"
    </select>

    <select id="findDepartmentName" resultType="String">
        select d.name
        from "Employees" e
                 join "Departments" d on e.department_id = d.id
    </select>


    <select id="findHireANdDepartmentName" resultType="EmployeesDto">
        select e.hire_date, d.name as departmentName
        from "Employees" e
                 join "Departments" d on e.department_id = d.id
        where e.id = #{id}
    </select>
</mapper>